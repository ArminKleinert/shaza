(import-host "std.stdio")
(import-host "std.conv")
(import-host "std.typecons")
(import-host "std.string")
(import-host "std.algorithm")
(import-host "std.array")

(define abc "def")
(define foo (::int i) (llr i + 1))
(define ::int bar () 1)
(define (T) baz (::T arg) (writeln arg))

(define ::N (N) inc (::N n) (llr n + 1))
(define ::N (N) dec (::N n) (llr n - 1))

(define ::T (T) applySelf (::T elem ::"delegate T (T e)" func) (func elem))
(define ::T (T) applyIf
  (::T elem ::T default ::"delegate ::bool (T e)" pred  ::"delegate ::T (T e)" func)
  (if (pred elem) (return (func elem)) (return default)))
