(import-host "std.stdio")
(import-host "std.conv")
(import-host "std.typecons")
(import-host "std.string")
(import-host "std.algorithm")

(import-host "shaza.buildins")
(import-host "shaza.std")

(gen-define ::N (N) (inc ::N n) (ll n + 1))
(gen-define ::N (N) (dec ::N n) (ll n - 1))

(et-define ::int (plus ::int i0 ::int i1) (ll i0 + i1))
(et-define ::long (plus ::long i0 ::long i1) (ll i0 + i1))
(et-define ::double (plus ::double i0 ::double i1) (ll i0 + i1))

(et-define ::int (minus ::int i0 ::int i1) (ll i0 - i1))
(et-define ::long (minus ::long i0 ::long i1) (ll i0 - i1))
(et-define ::double (minus ::double i0 ::double i1) (ll i0 - i1))

(et-define ::int (mul ::int i0 ::int i1) (ll i0 * i1))
(et-define ::long (mul ::long i0 ::long i1) (ll i0 * i1))
(et-define ::double (mul ::double i0 ::double i1) (ll i0 * i1))

(et-define ::int (div ::int i0 ::int i1) (ll i0 / i1))
(et-define ::long (div ::long i0 ::long i1) (ll i0 / i1))
(et-define ::double (div ::double i0 ::double i1) (ll i0 / i1))

(et-define ::int (mod ::int i0 ::int i1) (ll i0 % i1))
(et-define ::long (mod ::long i0 ::long i1) (ll i0 % i1))
(et-define ::double (mod ::double i0 ::double i1) (ll i0 % i1))

(et-define ::int (bit-and ::int i0 ::int i1) (ll i0 & i1))
(et-define ::long (bit-and ::long i0 ::long i1) (ll i0 & i1))

(et-define ::int (bit-or ::int i0 ::int i1) (ll i0 | i1))
(et-define ::long (bit-or ::long i0 ::long i1) (ll i0 | i1))

(et-define ::int (bit-xor ::int i0 ::int i1) (ll i0 ^ i1))
(et-define ::long (bit-xor ::long i0 ::long i1) (ll i0 ^ i1))

(et-define ::bool (and ::bool b0 ::bool b1) (ll b0 && b1))
(et-define ::bool (or ::bool b0 ::bool b1) (ll b0 || b1))
(et-define ::bool (not ::bool b0) (ll !b0))

(et-define ::bool (T) (eql? ::T e0 ::T e1) (ll e0 == e1))
(et-define ::bool (T) (not_eql? ::T e0 ::T e1) (ll e0 != e1))
(et-define ::bool (T) (lt? ::T e0 ::T e1) (ll e0 < e1))
(et-define ::bool (T) (le? ::T e0 ::T e1) (ll e0 <= e1))
(et-define ::bool (T) (gt? ::T e0 ::T e1) (ll e0 > e1))
(et-define ::bool (T) (ge? ::T e0 ::T e1) (ll e0 >= e1))

(et-define ::bool (T) (nil? ::T e) (ll e is null))

(gen-define ::T[] (T) (concat ::T[] coll0 ::T[] coll1) (ll coll0 ~ coll1))
(gen-define ::T[] (T) (append ::T[] coll0 ::T value) (ll coll0 ~ value))

(gen-define ::T[] (T) (concat! ::T[] coll0 ::T[] coll1)
    (ll coll0 ~= coll1)
    coll0)
(gen-define ::T[] (T) (append! ::T[] coll0 ::T value)
    (ll coll0 ~= value)
    coll0)

(gen-define ::bool (T) (contains ::T[] coll0 ::T value)
   (ll "foreach ( elem ;  coll ) {")
   (if (eql? elem value) (return true) (coninue))
   (ll "}")
   false)

(et-define ::bool (string_include? ::string s ::char c)
   (ll s.canFind(c)))

(et-define ::bool (string_start_with? ::string s ::char c)
   (eql? (get s 0) c))

(et-define ::bool (string_end_with? ::string s ::char c)
   (eql? (get s (dec (size s))) c))

(et-define ::void (times ::long num, ::"void delegate()" f)
    (ll while "(i < size(coll0)) {")
    (f)
    (setv! num (dec num))
    (ll "}")

(gen-define ::T (T) (size ::T[] coll)
    (ll "coll.length"))

(gen-define ::T (T) (get ::T[] coll ::size_t index)
    (ll "index >= 0 ? coll[index] : coll[coll.length+index]"))
(gen-define ::T (T) (first ::T[] coll) (get coll 0))
(gen-define ::T (T) (last ::T[] coll) (get coll (dec (size coll))))
(gen-define ::T (T) (rest ::T[] coll) (slice coll 1 0))

(gen-define ::T (T) (set! ::T[] coll ::size_t index ::T value)
    (ll "coll[index]" = value))

(gen-define ::T (T) (slice ::T[] coll ::size_t start ::size_t end_offset)
    (ll "coll[start .. $-offset]" = value))

(import-host "std.conv" [to])

(gen-define ::string (T) (str ::T obj)
    (ll to!string(obj)))
(gen-define ::string (T) (toString ::T obj)
    (ll to!string(obj)))
(gen-define ::int (T) (toInt ::T obj)
    (ll to!int(obj)))
(gen-define ::long (T) (toInt64 ::T obj)
    (ll to!long(obj)))
(gen-define ::double (T) (toFloat ::T obj)
    (ll to!double(obj)))
(gen-define ::float (T) (toFloat32 ::T obj)
    (ll to!float(obj)))
(gen-define ::double (T) (toFloat64 ::T obj)
    (ll to!double(obj)))

; SECTION app.sz

(import-host "compiler.types")
(import-host "compiler.ast")
(import-host "compiler.output")

(define dquote (ll '"'))

(et-define ::bool (is_string_literal ::string text)
    (and
        (and (ge? (size text) 2) (eql? (first text) dquote))
        (and (eql? (last text) dquote) (not_eql? (get text -2) 92))))

(et-define ::bool (is_valid_symbol_text? ::string text)
    (ll "foreach (char c; \"\\";()[]{}#:\") {")
        (if (string_include? text c)
            (return false)
            0)
    (ll "}")
    true)


