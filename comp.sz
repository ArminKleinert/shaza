(module compiler)

(def-struct Token
  ::string text
  ::string type
  ::long line
  ::long index)

(define ::Token[] tokens [])
(define ::long line 0)
(define ::long chIndex 0)
(define ::long start-line 0)
(define ::long start-char 0)
(define ::bool next-escaped #f)
(define ::string curr-text "")
(define ::bool is-in-string #f)
(define ::bool is-in-type-literal #f)

(define ::char quot-mark (ch "\""))

(define ::bool is-string-literal (::string text)
  (and (ge? (size text) 2)
       (eql? (first text) quot-mark)
       (eql? (last text) quot-mark)))

(define ::bool is-valid-symbol (::string text)
  (if (lt? (size text) 2)
    (return false))
  (loop (curr (first text) ::string rst)
    (if (empty? rst)
      (return true))
    (if (contains "\";()[]{}#:" curr)
      (return false)
      (recur (first rst) (slice rst 1))))

(define ::bool is-valid-integral? (::string text)
    (llr "canConvert!long(e)")))

(define ::bool is-valid-unsigned? (::string text)
    (llr "canConvert!ulong(e)")))

(define ::bool is-valid-float? (::string text)
    (llr "canConvert!double(e)")))

(define is-valid-number? (::string text)
    (and (is-valid-integral? text) (is-valid-float? text)))

(define ::Token[] tokenize (::string text)
  )

