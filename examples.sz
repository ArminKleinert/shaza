(import-host "std.string")
(import-host "std.stdio")

(define abc "def")
(define ::int defg 1000)
(define ::int bar () 1)
(define (T) baz (::T arg) (writeln arg))

(define ::bool (T) eql? (::T o0 ::T o1) (llr o0 == o1))
(define ::bool (T) not_eql? (::T o0 ::T o1) (llr o0 != o1))
(define ::bool (T) lt? (::T o0 ::T o1) (llr o0 < o1))
(define ::bool (T) le? (::T o0 ::T o1) (llr o0 <= o1))
(define ::bool (T) gt? (::T o0 ::T o1) (llr o0 > o1))
(define ::bool (T) ge? (::T o0 ::T o1) (llr o0 >= o1))

(define ::N (N) inc (::N n) (opcall + n 1))
(define ::N (N) dec (::N n) (opcall - n 1))

(define ::T (T) applySelf (::T elem ::"T delegate (T e)" func) (func elem))
(define ::T (T) applyIf
  (::T elem ::T default1 ::"bool delegate (T e)" pred  ::"T delegate (T e)" func)
  (if (pred elem) (return (func elem)) (return default1)))

; Single line comment

(comment
    Everything here is completely ignored.
    This works across lines.)

(def-struct MyType ::int n)
(def-struct MyTypeWithMoreFields ::int m ::int n ::string o ::float p)
(def-struct GenericType (T) ::T entry)
(def-struct EmptyType)

; Test the if statement
(define ::bool ifTest () {
    (if #t (return #t) (return #f)))

; recur to function
(define ::void infinite_loop ()
    (writeln "hey!")
    (recur))

; recur to loop
; FIXME For some reason, the compiler inserts a ; at the end here. Find out why.
(define ::int finite_loop ()
    (loop (::int i 0
           v 1)
        (if (ge? i 10)
            (return i)
            (recur (inc i) 15))))

; Set attribute "n" of object mt
(define ::void setv_attr_test_1 (::MyType mt)
    (setv! mt n 15))

; This one is more of a side-effect of how symbols are parsed. Still nice.
; Notice that this compiles to a simple assignment instead of an
; attribute assignment.
(define ::void setv_attr_test_2 (::MyType mt)
    (setv! mt.n 15))

; Set attribute "n" of object mt; The keyword is turned into a symbol
(define ::void setv_attr_test_3 (::MyType mt)
    (setv! mt :n 15))

; Set attribute "n" of object mt; The string is unquoted.
(define ::void setv_attr_test_4 (::MyType mt)
    (setv! mt "n" 15))

; Tests for character literals
(define chtest1 \tab)
(define chtest2 \space)
(define chtest3 \newline)
(define chtest4 \z)
