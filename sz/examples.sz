(module examples)

(import-sz sz/stdlib)

(import-host "std.string")
(import-host "std.stdio")
(import-host "std.conv")

; Simple assignment with type induction
(define abc "def")

; Simple assignment to initial value of type
(define ::long bcd) ; 0

; Simple assignment
(define ::int defg 1000)

; Simple function definition
(define ::int bar () 1)

; Simple generic void-function
(define (::T) baz (::T arg) (writeln arg))

; Testing implicit return
(define ::bool implicit-return-0 () 1)
(define ::bool implicit-return-1 () (llr 1))
(define ::int does-nothing () 123)
(define ::void no-return-on-void () (does-nothing))

; define-fn forces the define to output a function
;   and never a variable.
; <type> <fn> () { return <type>.init; }
; Empty body if type is void.
(define-fn ::int implicit-init-return-0 () )
(define-fn ::bool implicit-init-return-1 () )

; Test typed assignment with init-value
; bool var = bool.init;
(define ::bool implicit-init-test)

; Multiline-comment
(comment
    Everything here is completely ignored.
    This works across lines.)

(define ::void let-example ()
  (let (::int i 10 ; int
        j 11 ; auto
        abc "") ; auto
    (writefln "%s %s %s" i j abc)))

; Test type-definitions
(def-type MyType ::int n)
(def-type MyTypeWithMoreFields ::int m ::int n ::string o ::float p)
(def-type GenericType (::T) ::T entry)
(def-type EmptyType)

(def-type MyStruct ::int n)
(def-type MyStructWithMoreFields ::int m ::int n ::string o ::float p)
(def-type GenericStruct (::T) ::T entry)
(def-type EmptyStruct)

; Test the if statement
(define ::bool if-test ()
  (if #t #t #f))

; Test the when statement
(define ::bool when-test ()
  (when #t #t #f))

; Test tail-recursion
; TODO Implement
(define ::int tail-recur-test (::int n ::int res)
  (if (le? n 1)
    1
    (tail-recur-test (dec n) res)))

; Treat when as expression and allow for implicit return
(define ::int when-as-expression (::int n)
  (when (lt? n 0) (sub 0 n) n))

; This loop doesn't do much but uses implicit return
(define ::int loop-as-expression (::int n)
  (loop () 1))

; Same for let. implicit return
(define ::int let-as-expression (::int n)
  (let (a 1 b 1) (llr "a+b")))

; Set attribute "n" of object mt
(define ::void setv_attr_test_1 (::MyType mt)
  (setv! mt n 15))

; This one is more of a side-effect of how symbols are parsed. Still nice.
; Notice that this compiles to a simple assignment instead of an
; attribute assignment.
(define ::void setv_attr_test_2 (::MyType mt)
  (setv! mt.n 15))

; Set attribute "n" of object mt; The keyword is turned into a symbol
(define ::void setv_attr_test_3 (::MyType mt)
  (setv! mt :n 15))

; Set attribute "n" of object mt; The string is unquoted.
(define ::void setv_attr_test_4 (::MyType mt)
  (setv! mt "n" 15))

; Tests for character literals
(define chtest1 \tab)
(define chtest2 \space)
(define chtest3 \newline)
(define chtest4 \z)

(comment
; Tests for the to-function
(import-host "std.conv")
(define s-to-i-with-base-test (to ::int "12345" 16))
(define s-to-i-test (to ::int "12345"))

; Tests for the cast-function
(define cast-f-i-test (cast ::int 1.5f))
)

; Lambda tests
(define d (lambda ::int (::int i) (inc i))) ; Assign lambda to a variable
(define ::int call-lambda (::int:delegate(int) l) (l 1)) ; Take lambda as an argument
(define ::void call-call-lambda () (writeln (call-lambda (lambda ::int (::int i) (inc i))))) ; Call function with a lambda

; Lazy argument test
(define ::int give_int_and_print(::int i) (writeln i) i)
(define ::bool or_ (::lazy:int i ::lazy:int j) (llr i || j))
(define ::void docall ()
  (or_ (give_int_and_print 0) (give_int_and_print 1)) ; prints 0 and 1
  (or_ (give_int_and_print 5) (give_int_and_print 9))) ; prints only 5

; New type syntax test
(define ::static:int static-i-0 0)
(define ::"static int" static-i-1 0) ; Same code as the  above
(define ::immutable(int) immutable-i 0) ; Brackets are ok
(define ::int[] int-array []) ; Square brackets are ok
(define ::int* int-pointer null) ; Star is ok

; Simple function with meta info about generics
(meta
  (:generics [::T])
  (define ::void meta-test-0 (::T arg) (writeln arg)))

(meta
  (:generics [::T1 ::T2])
  (define ::void meta-test-1 (::T1 arg) (writeln arg)))

(meta (:generics [::T] :aliases [none2?])
  (define ::bool is-nil2? (::T o) (llr "o is null")))

(define ::void call-alias () (none2? null))

(meta (:visibility :private)
  (define ::void hidden-fn () (writeln)))

(meta (:export-as "awesomeness")
  (define ::int not-so-awesome () 41))
(define ::void call-awesome-1 () (writeln (awesomeness)))
(define ::void call-awesome-2 () (writeln (not-so-awesome)))

(meta
  (:generics [::Num] :visibility :private :returns ::string)
  ; Automatically adds generic class Num, visibility private and return type Num
  (define num-fn-1 (::Num i0 ::Num i1) (llr "" ~ i0 ~ "" ~ i1))
  ; Same here
  (define num-fn-2 (::Num i0 ::Num i1) (llr "" ~ i0 ~ "" ~ i1))
  ; private and uses generic type Num, but returns string
  (define ::Num num-fn-3 (::Num i0 ::Num i1) (+ i0 i1))
  ; Same visibility and return type, but different generics.
  (define (::N) num-fn-4 (::N i0 ::N i1) (llr "" ~ i0 ~ "" ~ i1))
  ; Function with meta which changes the return-type
  (meta (:returns ::int)
    (define num-fn-5 (::N i0) (to ::int i0))))

; Implicit return on list
(define ::string[] returnAList ()
  ["a" "b" "c"])

; recur to function; Runs forever because there is no condition
(define ::void recur-test ()
  (writeln "hey!")
  (recur))

; recur to loop
(define ::int loop-recur-test ()
  (loop (::int i 0
         v 1)
    (when (llr i < 10)
      i
      (recur (inc i) 15))))

; Multiple declarations with the same :export-as
(meta (:returns ::bool :export-as "and")
  (define && (::lazy:bool b0 ::lazy:bool b1) (llr b0 && b1))
  (define && (::lazy:bool b0 ::lazy:bool b1 ::lazy:bool b2) (llr b0 && b1 && b2))
)

; meta with :tk-aliases
(meta (:tk-aliases [::T ::bool])
  (define ::T check (::T b) b))
(meta (:tk-aliases [::Map ::V[K] ] :generics [::V ::K])
  (define ::Map get-by-key (::Map m ::K k) (llr "m[k]")))

(meta (:export-as "export_next" :aliases [succ])
  (define ::int next (::int i) (llr i+1)))
(define ::int accept-func-pointer (::int:delegate(int) f ::int i0)
  (f i0))
(define ::int apply-func-pointer ()
  (import-host "std.functional")
  (accept-func-pointer (fp next) 1))
;(define ::int apply-func-pointer-1 ()
;  (accept-func-pointer (fp export_next) 1))
(define ::int apply-func-pointer-alias ()
  (import-host "std.functional")
  (accept-func-pointer (fp succ) 1))

(define ::int (::FUNC) accept-anonymous-func-type (::FUNC f ::int i0)
  (f i0))
(define ::int apply-func-pointer-anonymous-func-type ()
  (import-host "std.functional")
  (accept-func-pointer (fp next) 1))

(define ::auto (::T) plus2 (::T i) (+ i i))
(define ::void test-plus2 ()
  (writeln (plus2 8)))

; Test automatic type induction for function
(define (::T) byauto () (llr T.init))
(define auto-fn () (+ 1 2.0))

; Test addition of different types

(define (::T ::T1) addAny (::T i ::T1 j) (llr i + j))

; Test anonymous types and parameter names

(define anon-params-1 (_ _) (llr $0 + $1))
(define anon-params-2 (::int $ ::float $ ::int $) (llr $0 + $1 + $2))
(define anon-params-nested (::int $) (lambda ::int () $0))

(define anon-types-0 (:: i) (llr i + 1))
(define anon-types-1 (:: i ::int j) (llr i + j))
(define anon-types-2 (:: i :: j) (llr i + j))
(define anon-types-3 (i ::int j) (llr i + j))
(define anon-types-4 (i j) (llr i + j))

; Test alias

(alias alias1 ::int)
(alias alias2 byauto)

; Test include

(include sz/examples_extra)

; Test varargs

(meta (:variadic #t)
    (define varargs1 (::int i) (println! i)))
(meta (:variadic #f)
    (define not-varargs (::int i) (println! i)))
