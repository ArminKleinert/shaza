(module stdlib)

(import-host "std.stdio")
(import-host "std.conv")
(import-host "std.typecons")
(import-host "std.string")
(import-host "std.algorithm")
(import-host "std.array")
(import-host "std.functional")

; SECTION Important Shaza types

(def-struct Keyword ::string text)
(define keyword (::string text) (Keyword text))
(define str (::Keyword kw) kw.text)

; SECTION Important imports

; Import basic stuff
(include basics)

; Import basic collection functions
(include basic_collection)

; SECTION Type convertions

(define ::string (::T) to_s (::T e) (llr "to!string(" e ")"))

(ll "bool canConvert(toType, fromType)(fromType e) {
import std.conv;
try { to!toType(e); return true;
} catch(ConvException ce) { return false; }}")

; TODO All of the below should be implemented as a macro in the future.
(meta (:returns ::bool :generics [::T])
  (define to-int-valid? (::T e) (llr "canConvert!int(e)"))
  (define to-uint-valid? (::T e) (llr "canConvert!uint(e)"))
  (define to-long-valid? (::T e) (llr "canConvert!long(e)"))
  (define to-ulong-valid? (::T e) (llr "canConvert!ulong(e)"))
  (define to-float-valid? (::T e) (llr "canConvert!float(e)"))
  (define to-double-valid? (::T e) (llr "canConvert!double(e)"))
)

(meta (:returns ::string :generics [::T])
  (define ::string str (::T obj) (to ::string obj))
)

(define ::void (::T) print! (::T text)
  (write text))

(define ::void (::T) println! (::T text)
  (writeln text))

(define ::void (::T) error! (::T text)
  (write (ll stderr) text))

(define ::void (::T) errorln! (::T text)
  (writeln (ll stderr) text))

(define ::string readln! ()
  (llr "stdin.readln"))

(comment
- Tokenization as always
- Build AST
- Traverse top-level AST for functions/variables (define, define-fn), structs (def-struct), meta (meta), shaza-imports (sz-import) and macros (def-macro)
  - For meta, do usual parsing for meta and functions, but write no output; Save info in global
  - For functions, save in global, write no output
  - For macros, save in global, write to separate file
  - For structs, save in global
  - For import, read, tokenize and build AST, then put AST where the import was
- Run macro-file on AST (leave macros out?) (-> Output???)
- Find function calls. If a function is specified to take varargs, put those into a typed list.
- Parse as usual
- Write output
- Run

FIXME-List
- Currently, only one function can be saved under the same name (it still works but might be a problem later)
)



