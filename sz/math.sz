(module math)

(import-sz stdlib)

(meta (:generics [::T])
(define ::T sum (::T[] seq)
  (reduce
    (lambda ::T (::T l0 ::T l1) (+ l0 l1))
    seq 0))

(define ::T min (::T[] coll)
  (when (= (size coll) 0) (llr "T.init")
  (when (= (size coll) 1) (first coll)
  (loop (::T[] c (rest coll)
         ::T res (first coll))
    (when (empty? c) res
    (when (< (first c) res)
      (recur (rest c) (first c))
      (recur (rest c) res)))))))

(define ::T max (::T[] coll)
  (when (= (size coll) 0) (llr "T.init")
  (when (= (size coll) 1) (first coll)
  (loop (::T[] c (rest coll)
         ::T res (first coll))
    (when (empty? c) res
    (when (> (first c) res)
      (recur (rest c) (first c))
      (recur (rest c) res)))))))

(define ::T fib (::T _n)
  (loop (n _n a 1 b 0)
    (when (= n 0)
      b (recur (dec n) (+ a b) a))))
)

(define ::long[] divisors (::long l)
  (loop (::long[] res []
         n (>> l (ll "1L")))
    (when (= n 0) res
    (when (= (% l n) 0)
        (recur (append res n) (dec n))
        (recur res (dec n))))))

(define ::long sum-of-divisors (::long l)
  (loop (::long res 0 n (/ l 2))
    (when (= n 0) res
    (when (= (% l n) 0)
      (recur (+ res n) (dec n))
      (recur res (dec n))))))

(define ::long sum-of-divisors-1 (::long l)
  (sum (divisors l)))

(define ::double approx-euler (::long l)
    (/ 1.0 (fib l)))

(meta (:generics [::T] :returns ::T)
  (define limit (::T val ::T max)
    (% val max))
  (define limit (::T val ::T min ::T max)
    (- (% val (+ max min)) min)))

; SECTION Pseudo-Randomness

(comment
  To handle randomness in a functional way, Shaza provides a struct-type
  "Random", which is returned by all the below functions.
  )

(def-struct Random ::ulong value ::ulong seed)
(define ::ulong default-seed 8678280846964778612)

(define ::Random rseed (::ulong seed)
  (Random (inc seed) seed))

(define ::Random random(::ulong seed)
  (let (seed1 (bit-xor seed (>> seed 12))
        seed2 (bit-xor seed1 (<< seed1 25))
        seed3 (bit-xor seed2 (>> seed2 27)))
    (Random (bit-xor seed 0x2545F4914F6CDD1D) seed)))

(define ::Random random (::Random r)
  (let (nr (random r.seed))
    (nr.with_seed  r.value)))

(define ::Random random (::Random r ::ulong max)
  (let (r2 (random r))
    (r2.with_value (limit r2.value max))))

(define ::Random random (::Random r ::ulong min ::ulong max)
  (let (r2 (random r))
     (r2.with_value (limit r2.value min max))))

(define ::ulong ulong-value (::Random r) r.value)
(define ::long long-value (::Random r) (cast ::long r.value))
(define ::uint uint-value (::Random r) (cast ::uint r.value))
(define ::int int-value (::Random r) (cast ::int r.value))
(define ::double double-value (::Random r) (cast ::double r.value))
