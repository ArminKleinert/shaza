(module time)

(import-sz sz/stdlib)
(import-host std.datetime.systime)

(alias ::timeunit ::long)

(meta (:visibility :private)
  (define ::SysTime sys-time (::long stdtime) (llr "SysTime(stdtime)"))
  (define ::long curr-std-time () (llr Clock.currStdTime))
  (define ::SysTime curr-sys-time () (llr "SysTime(Clock.currStdTime)"))
)

(meta (:returns ::long)
  (define time-now () (curr-std-time))
  (define unix-time (::timeunit std-time) (sys-time std-time).unixTime)

  (define day (::timeunit tu) (sys-time tu).day)
  (define day-of-gregorian-cal (::timeunit tu) (sys-time tu).dayOfGregorianCal)
  (define day-of-week (::timeunit tu) (sys-time tu).day-of-Week)
  (define day-of-year (::timeunit tu) (sys-time tu).dayOfYear)
  (define days-in-month (::timeunit tu) (sys-time tu).daysInMonth)
  (define end-of-month (::timeunit tu) (sys-time tu).endOfMonth)
  (define frac-secs (::timeunit tu) (sys-time tu).fracSecs)
  (define hour (::timeunit tu) (sys-time tu).hour)
  (define is-leap-year (::timeunit tu) (sys-time tu).isLeapYear)
  (define iso-week (::timeunit tu) (sys-time tu).isoWeek)
  (define julian-day (::timeunit tu) (sys-time tu).julianDay)
  (define max (::timeunit tu) (sys-time tu).max)
  (define min (::timeunit tu) (sys-time tu).min)
  (define minute (::timeunit tu) (sys-time tu).minute)
  (define mod-julian-day (::timeunit tu) (sys-time tu).modJulianDay)
  (define month (::timeunit tu) (sys-time tu).month)
  (define second (::timeunit tu) (sys-time tu).second)
  (define std-time (::timeunit tu) (sys-time tu).stdTime)
  (define timezone (::timeunit tu) (sys-time tu).timezone)
  (define year (::timeunit tu) (sys-time tu).year)
  (define year-bc (::timeunit tu) (sys-time tu).yearBC)
)
