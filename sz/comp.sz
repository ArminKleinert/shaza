(module shaza-compiler)

(import-sz stdlib)

(def-type Token _
  ::string text
  ::Keyword type
  ::size_t line
  ::size_t index)

(comment
(def-type Node _
  ::string text
  ::Keyword type
  ::size_t line
  ::size_t index
  ::Node[] children)
)

(def-type AstNode _ ::Token tkn ::AstNode[] children)
(define ast-node (::Token tkn ::AstNode[] children) (new ::AstNode tkn children))
(define ast-node (::Token tkn) (new ::AstNode tkn []))
(define type (::AstNode ast) ast.tkn.type)
(define nodes (::AstNode ast) ast.children)
(define ast-size (::AstNode ast) (size ast.children))
(define text (::AstNode ast) ast.tkn.text)
(define tknstr (::AstNode ast) (str ast.tkn))
(define ::string ast-string (::AstNode ast)
  (join [
  "\nAstNode { token=" (to ::string ast.tkn) " children=["
  (reduce (lambda ::string (::AstNode node ::string res) (append res (ast-string node))) (nodes ast) "")
  "] }"
  ]))

(def-type Context
  ::Token[] tokens
  ::Node ast
  ::int curr-tkn-line
  ::int curr-tkn-char
  ::int curr-tkn-start-line
  ::int curr-tkn-start-char
  ::bool next-escaped
  ::string curr-tkn-text
  ::bool is-in-string
  ::bool is-in-type-literal)

(comment TokenTypes:
  :unknown
  :root
  :lit-int
  :lit-uint
  :lit-flt
  :lit-bool
  :lit-string
  :lit-char
  :lit-list
  :lit-map
  :lit-keyword
  :lit-type
  :symbol
  :buildin-fn-call
  :buildin-macro-call
  :scope-open
  :scope-close
  :lst-open
  :lst-tagged-open
  :lst-close
  :closed-scope
  :closed-tagged-list
  :closed-list
  :ln-comment
)

(define ::char quot-mark (first "\""))

(meta (:returns ::bool)
(define is-string-literal? (::string text)
  (and (>= (size text) 2) (starts-with? text "\"") (ends-with? text "\"")))

(define is-valid-symbol-text? (::string text)
  (none? (lambda ::bool (::immutable(char) c) (includes? text c)) "\";()[]{}#:"))

(define is-type-literal? (::string text)
  (starts-with? text "::"))

(define is-keyword-literal (::string text)
  (and (>= (size text) 1) (starts-with? text ":") (is-valid-symbol-text? (rest text))))

(define is-bool-literal? (::string text) (or (== text "#t") (== text "#f")))

(define is-char-literal? (::string text)
  (if (== (size text) 2)
    (starts-with? text "\\")
    (and (> (size text) 2) (in? ["\\space" "\\newline" "\\tab" "\\colon"] text))))

(define last-char-must-separated? (::string text)
  (or
    (and (ends-with? text ")") (! (in? text "(")))
    (and (ends-with? text "]") (! (in? text "[")))
    (and (ends-with? text "}") (! (in? text "{")))))

(define ::Keyword tknTypeByText (::string text)
  (if (to-ulong-valid? text) :litUInt
  (if (to-long-valid? text) :litInt
  (if (to-double-valid? text) :litFlt
  (if (is-bool-literal? text) :litBool
  (if (is-keyword-literal? text) :litKeyword
  (if (is-type-literal? text) :litType
  (if (is-char-literal? text) :litChar
  (if (is-valid-symbol-text? text) :symbol
  (if (is-string-literal? text) :litString
  (if (== text "[") :lstOpen
  (if (== text "]") :lstClose
  (if (== text "(") :scopeOpen
  (if (== text ")") :scopeClose
  (if (== text ";") :lnComment
  :unknown)))))))))))))))

; TODO
(define ::Token[] create-tokens (::Context ctx ::string s)
  [])

(define ::Context add-tokens (::Context ctx ::Token[] tkns)
  (new ::Context
    (append ctx.tokens tkns) ctx.ast
    ctx.curr-tkn-line ctx.curr-tkn-char
    ctx.curr-tkn-line ctx.curr-tkn-char
    #f "" #f #f))

(define ::Context close-token (::Context ctx ::string c)
  (add-tokens ctx (create-tokens ctx (append ctx.curr-tkn-text c))))

(define ::Context close-token (::Context ctx)
  (add-tokens ctx (create-tokens ctx ctx.curr-tkn-text)))

; TODO
(define ::Context tokenize-sub-next-char-in-string (::Context ctx ::string c)
  ctx)

(define ::Context tokenize-sub-next-char (::Context ctx ::string c)
  (when (= c "\"")
    (let ()
      (when (! ctx.is-in-type-literal)
        (setv! ctx (close-token ctx)))
      (setv! ctx.is-in-string #t)
      (setv! ctx.curr-tkn-text (append ctx.curr-tkn-text c))
      ctx)
  (when (and (= c ":") (= ctx.curr-tkn-text ":"))
    (let ()
      (setv! ctx.is-in-type-literal #t)
      (setv! ctx.curr-tkn-text (append ctx.curr-tkn-text c))
      ctx)
  (when (or (or (= c " ") (= c "\t")) (= c "\n"))
    (close-token ctx c)
  (when (or
          (and (= c "]") (! (includes? ctx.curr-tkn-text "[")))
          (and (= c ")") (! (includes? ctx.curr-tkn-text "(")))
          (and (= c "}") (! (includes? ctx.curr-tkn-text "{"))))
    (close-token ctx c)
  (when (and (! ctx.is-in-type-literal)
             (or (= c "(") (= c ")") (= c "]")))
    ctx
    ctx
    ))))))



(define ::Context next-char (::Context ctx ::char c)
  (setv! ctx curr-tkn-char (inc ctx.curr_tkn_char))
  (when (= c \newline)
    (setv! ctx curr-tkn-line (inc ctx.curr_tkn_line))
    (setv! ctx curr-tkn-char (inc ctx.curr_tkn_char)))
  (when ctx.is_in_string
    (tokenize-sub-next-char-in-string ctx (append "" c))
    (tokenize-sub-next-char ctx (append "" c))))

(comment
(define ::Context tokenize (::Context ctx ::string source)
  (close-token
    (reduce
      (lambda ::Context (::char c ::Context ctx1) (next-char ctx1 c))
      source ctx)))
)










